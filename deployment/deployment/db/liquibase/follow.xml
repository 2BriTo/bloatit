<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<databaseChangeLog xmlns="http://www.liquibase.org/xml/ns/dbchangelog"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.liquibase.org/xml/ns/dbchangelog
         http://www.liquibase.org/xml/ns/dbchangelog/dbchangelog-2.0.xsd">

 	<changeSet author="Yoann Plénet" id="Creation of the content follow table">
		<comment>Creating the table used to store followed content</comment>
		<createTable tableName="daofollow">
            <column name="id" type="int4">
                <constraints nullable="false" primaryKey="true" primaryKeyName="daofollowpk"/>
            </column>
            <column name="actor_id" type="int4">
                <constraints nullable="false"/>
            </column>
            <column name="usercontent_id" type="int4">
                <constraints nullable="false"/>
            </column>
            <column name="creationdate" type="datetime"/>
            <column name="lastconsultationdate" type="datetime"/>
            <column name="followstate" type="int4">
                <constraints nullable="false"/>
            </column>
		</createTable>
	</changeSet>
	
	<changeSet author="Yoann Plénet" id="Creation of the content following FKs ">
        <addForeignKeyConstraint baseColumnNames="actor_id" baseTableName="daofollow" constraintName="FKCFOLLOWDAOACTOR" deferrable="false" initiallyDeferred="false" referencedColumnNames="id" referencedTableName="daoactor" referencesUniqueColumn="false"/>
        <addForeignKeyConstraint baseColumnNames="usercontent_id" baseTableName="daofollow" constraintName="FKCFOLLOWDAOUSERCONTENT" deferrable="false" initiallyDeferred="false" referencedColumnNames="id" referencedTableName="daousercontent" referencesUniqueColumn="false"/>
	</changeSet>
	
	<changeSet author="Yoann Plénet" id="Change name of usercontent_id to followed_id">
	    <renameColumn tableName="daofollow" oldColumnName="usercontent_id" newColumnName="followed_id"/>
	</changeSet>
	
	<changeSet author='Yoann Plénet' id="follow past contributions">
		<sql splitStatements="false">
            CREATE OR REPLACE FUNCTION migrate_follow() RETURNS void AS $$
            DECLARE  
	            c	RECORD;
	            seq	INTEGER;
	            nb	INTEGER;
            BEGIN SET CONSTRAINTS ALL DEFERRED;
	            RAISE NOTICE 'Now gathering contributions';
	            FOR c IN SELECT * FROM daocontribution, daousercontent WHERE daocontribution.id = daousercontent.id LOOP
		            SELECT COUNT(*) INTO nb FROM daofollow WHERE actor_id = c.member_id AND followed_id = c.feature_id;
		            RAISE NOTICE 'SELECT COUNT(*) INTO nb FROM daofollow WHERE actor_id = % AND followed_id = % ==> %' , c.member_id, c.feature_id, nb;
		            IF nb = 0 THEN 
			            SELECT nextval('hibernate_sequence') INTO seq;
			            INSERT INTO daofollow VALUES (seq, c.member_id, c.feature_id, timeofday()::timestamp, timeofday()::timestamp, 0);
		            ELSE
			            RAISE NOTICE 'Skipping (already present)';
		            END IF;
	            END LOOP;
            END;
            $$ LANGUAGE plpgsql;

            SELECT * FROM migrate_follow();
		    DROP FUNCTION migrate_follow();
		</sql>
	</changeSet>
	
	<changeSet author='Yoann Plénet' id="follow past features, offers">
		<sql splitStatements="false">
            CREATE OR REPLACE FUNCTION migrate_follow_features_and_offers() RETURNS void AS $$
            DECLARE  
                c	RECORD;
                seq	INTEGER;
                nb	INTEGER;
            BEGIN SET CONSTRAINTS ALL DEFERRED;
                RAISE NOTICE 'Now gathering features';
                FOR c IN SELECT * FROM daofeature, daousercontent WHERE daofeature.id = daousercontent.id LOOP
	                SELECT COUNT(*) INTO nb FROM daofollow WHERE actor_id = c.member_id AND followed_id = c.id;
	                RAISE NOTICE 'SELECT COUNT(*) INTO nb FROM daofollow WHERE actor_id = % AND followed_id = % ==> %' , c.member_id, c.id, nb;
	                IF nb = 0 THEN 
		                SELECT nextval('hibernate_sequence') INTO seq;
		                INSERT INTO daofollow VALUES (seq, c.member_id, c.id, timeofday()::timestamp, timeofday()::timestamp, 0);
	                ELSE
		                RAISE NOTICE 'Skipping (already present)';
	                END IF;
                END LOOP;
                
                RAISE NOTICE 'Now gathering offers';
                FOR c IN SELECT * FROM daooffer, daousercontent WHERE daooffer.id = daousercontent.id LOOP
	                SELECT COUNT(*) INTO nb FROM daofollow WHERE actor_id = c.member_id AND followed_id = c.feature_id;
	                RAISE NOTICE 'SELECT COUNT(*) INTO nb FROM daofollow WHERE actor_id = % AND followed_id = % ==> %' , c.member_id, c.feature_id, nb;
	                IF nb = 0 THEN 
		                SELECT nextval('hibernate_sequence') INTO seq;
		                INSERT INTO daofollow VALUES (seq, c.member_id, c.feature_id, timeofday()::timestamp, timeofday()::timestamp, 0);
	                ELSE
		                RAISE NOTICE 'Skipping (already present)';
	                END IF;
                END LOOP;
            END;
            $$ LANGUAGE plpgsql;

            SELECT * FROM migrate_follow_features_and_offers();
            DROP FUNCTION migrate_follow_features_and_offers();
		</sql>
	</changeSet>
	
</databaseChangeLog>
